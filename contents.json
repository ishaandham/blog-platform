{
  "paths": [
    {
      "type": "file",
      "value": "Basics.md"
    },
    {
      "type": "file",
      "value": "JWT.md"
    }
  ],
  "contents": [
    {
      "path": "Basics.md",
      "url": "Basics.html",
      "content": "<!--{\n    \"title\": \"Golang Basics\" ,\n    \"author\": \"Ishaan\",\n    \"tags\": [\"Go\", \"Golang\", \"Programming Language\"]\n}-->\n\n# Basics\n\n$$ f(x) = x^2 $$\n\n## Declaration\n\nIn package scope everything must have a keyword - func, var. Use \"var\" to declare a variable or use \":=\" short-assignment operator.\n\n``` Go\npackage main\n\nvar num int = 4\nconst Pi = 3.14 // constants - cannot use := for them\nconst day string = \"Monday\"\n\nvar (\n    num2 = 5\n    str string // default is \"\"\n)\n\nfunc declareStuff() {\n    num3 := 6 // can use short assignment here.\n    str2 := \"hi\"\n}\n```\n\n## Types\n\n* bool\n* string\n* int  int8  int16  int32  int64\n* uint uint8 uint16 uint32 uint64 uintptr\n* byte // alias for uint8\n* rune // alias for int32\n     // represents a Unicode code point\n* float32 float64\n* complex64 complex128\n\nAn \"int\", \"unint\", \"uintptr\" are 64 or 32 bits depending on the machine.\n\n### Default Values\n\n0 for numeric types, false for the boolean type, and\n\"\" (the empty string) for strings.\n\n### Type Conversions\n\nGo requires explicit type conversions unlike C.\n\n``` Go\nvar i int  = 42\nvar f float64 = float64(i)\n// or f := float64(i)\nvar u uint = uint(f)\n// Hence \nvar f float64 = i // this would be an error\n```\n\nWhen using := (short assignment) the type pf the variable depends on the **precision** of the literal. Example - 42 : int, 3.142 : float64, 0.86 + 0.5i : complex128\n\n## Control Structures\n\n### Loops\n\n``` Go\n// for loop\nfor i := 0; i < 10; i++ {\n    sum += i\n}\n// init and post statements are optional\nfor ; x < 100; {\n    //do something\n}\n// While in C is without init and post statements\nfor x < 1000 {\n    // this is a while loop!\n}\n```\n\n### Branching\n``` Go\nif x < 0 {\n    fmt.Println(\"number is negative\")\n}\n// you can add a statement in if\nif v := math.Pow(x, n); v < lim {\n    // v is scope of if\n}\n```",
      "html": "<!--{\n    \"title\": \"Golang Basics\" ,\n    \"author\": \"Ishaan\",\n    \"tags\": [\"Go\", \"Golang\", \"Programming Language\"]\n}-->\n<h1 id=\"basics\">Basics <a class=\"heading-anchor-permalink\" href=\"#basics\">#</a></h1>\n<p>$$ f(x) = x^2 $$</p>\n<h2 id=\"declaration\">Declaration <a class=\"heading-anchor-permalink\" href=\"#declaration\">#</a></h2>\n<p>In package scope everything must have a keyword - func, var. Use “var” to declare a variable or use “:=” short-assignment operator.</p>\n<pre><code class=\"language-Go\">package main\n\nvar num int = 4\nconst Pi = 3.14 // constants - cannot use := for them\nconst day string = &quot;Monday&quot;\n\nvar (\n    num2 = 5\n    str string // default is &quot;&quot;\n)\n\nfunc declareStuff() {\n    num3 := 6 // can use short assignment here.\n    str2 := &quot;hi&quot;\n}\n</code></pre>\n<h2 id=\"types\">Types <a class=\"heading-anchor-permalink\" href=\"#types\">#</a></h2>\n<ul>\n<li>bool</li>\n<li>string</li>\n<li>int  int8  int16  int32  int64</li>\n<li>uint uint8 uint16 uint32 uint64 uintptr</li>\n<li>byte // alias for uint8</li>\n<li>rune // alias for int32\n// represents a Unicode code point</li>\n<li>float32 float64</li>\n<li>complex64 complex128</li>\n</ul>\n<p>An “int”, “unint”, “uintptr” are 64 or 32 bits depending on the machine.</p>\n<h3 id=\"default-values\">Default Values <a class=\"heading-anchor-permalink\" href=\"#default-values\">#</a></h3>\n<p>0 for numeric types, false for the boolean type, and\n“” (the empty string) for strings.</p>\n<h3 id=\"type-conversions\">Type Conversions <a class=\"heading-anchor-permalink\" href=\"#type-conversions\">#</a></h3>\n<p>Go requires explicit type conversions unlike C.</p>\n<pre><code class=\"language-Go\">var i int  = 42\nvar f float64 = float64(i)\n// or f := float64(i)\nvar u uint = uint(f)\n// Hence \nvar f float64 = i // this would be an error\n</code></pre>\n<p>When using := (short assignment) the type pf the variable depends on the <strong>precision</strong> of the literal. Example - 42 : int, 3.142 : float64, 0.86 + 0.5i : complex128</p>\n<h2 id=\"control-structures\">Control Structures <a class=\"heading-anchor-permalink\" href=\"#control-structures\">#</a></h2>\n<h3 id=\"loops\">Loops <a class=\"heading-anchor-permalink\" href=\"#loops\">#</a></h3>\n<pre><code class=\"language-Go\">// for loop\nfor i := 0; i &lt; 10; i++ {\n    sum += i\n}\n// init and post statements are optional\nfor ; x &lt; 100; {\n    //do something\n}\n// While in C is without init and post statements\nfor x &lt; 1000 {\n    // this is a while loop!\n}\n</code></pre>\n<h3 id=\"branching\">Branching <a class=\"heading-anchor-permalink\" href=\"#branching\">#</a></h3>\n<pre><code class=\"language-Go\">if x &lt; 0 {\n    fmt.Println(&quot;number is negative&quot;)\n}\n// you can add a statement in if\nif v := math.Pow(x, n); v &lt; lim {\n    // v is scope of if\n}\n</code></pre>\n",
      "id": 0
    },
    {
      "path": "JWT.md",
      "url": "JWT.html",
      "content": "<!--{\n    \"title\": \"JWT Authentication\" ,\n    \"author\": \"Ishaan\",\n    \"tags\": [\"web\", \"webdev\", \"jwt\", \"authentication\"]\n}-->\n# Json Web Token (JWT)\n\nA token holding JSON that asserts claims (statements about entity) and can be signed and encrypted.\n\nIt is commonly used in authentication and avoids sending credentials on every request. A JWT is created by the server and signed using a 'secret key'. The user of the service can then use this JWT to gain access to authenticated endpoints.\n\n## JWT Structure\n```\nxxxxx.yyyyy.zzzzz\n```\n\nA JWT consists of three parts:\n\n* Header - Consists of type of token and signing algorithm (RSA, SHA256)\n* Payload - Consists of \"Claims\". Claims are statements about the user and more details.\n* Signature - Signature part takes the encoded header, payload and secret and uses an algorithm to sign it.\n\n\n\n\n",
      "html": "<!--{\n    \"title\": \"JWT Authentication\" ,\n    \"author\": \"Ishaan\",\n    \"tags\": [\"web\", \"webdev\", \"jwt\", \"authentication\"]\n}-->\n<h1 id=\"json-web-token-(jwt)\">Json Web Token (JWT) <a class=\"heading-anchor-permalink\" href=\"#json-web-token-(jwt)\">#</a></h1>\n<p>A token holding JSON that asserts claims (statements about entity) and can be signed and encrypted.</p>\n<p>It is commonly used in authentication and avoids sending credentials on every request. A JWT is created by the server and signed using a ‘secret key’. The user of the service can then use this JWT to gain access to authenticated endpoints.</p>\n<h2 id=\"jwt-structure\">JWT Structure <a class=\"heading-anchor-permalink\" href=\"#jwt-structure\">#</a></h2>\n<pre><code>xxxxx.yyyyy.zzzzz\n</code></pre>\n<p>A JWT consists of three parts:</p>\n<ul>\n<li>Header - Consists of type of token and signing algorithm (RSA, SHA256)</li>\n<li>Payload - Consists of “Claims”. Claims are statements about the user and more details.</li>\n<li>Signature - Signature part takes the encoded header, payload and secret and uses an algorithm to sign it.</li>\n</ul>\n",
      "id": 1
    }
  ]
}